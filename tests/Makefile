# A sample Makefile for building Google Test and using it in user
# tests.  Please tweak it to suit your environment and project.  You
# may want to move it to your project's root directory.
#
# SYNOPSIS:
#
#   make [all]  - makes everything.
#   make TARGET - makes the given target.
#   make clean  - removes all files generated by make.

# Please tweak the following variable definitions as needed by your
# project, except GTEST_HEADERS, which you can use in your own targets
# but shouldn't modify.

# Points to the root of Google Test, relative to where this file is.
# Remember to tweak this if you move this file.
GTEST_DIR = $(HOME)/googletest/googletest

# Where to find user code.
USER_DIR = ../src

# Where tests are located
TEST_DIR = .

BUILD_DIR = ../build

# Flags passed to the preprocessor.
# Set Google Test's header directory as a system directory, such that
# the compiler doesn't generate warnings in Google Test headers.
CPPFLAGS += -isystem $(GTEST_DIR)/include

# Flags passed to the C++ compiler.
CXXFLAGS += -g -Wall -Wextra -pthread -std=c++11

# All tests produced by this Makefile.  Remember to add new tests you
# created to the list.
TESTS = all_tests pattern_test note_test pitch_test velocity_test pan_test delay_test

# All Google Test headers.  Usually you shouldn't change this
# definition.
GTEST_HEADERS = $(GTEST_DIR)/include/gtest/*.h \
                $(GTEST_DIR)/include/gtest/internal/*.h

# House-keeping build targets.

all : $(TESTS)

clean :
	rm -f $(TESTS) gtest.a gtest_main.a *.o

# Builds gtest.a and gtest_main.a.

# Usually you shouldn't tweak such internal variables, indicated by a
# trailing _.
GTEST_SRCS_ = $(GTEST_DIR)/src/*.cc $(GTEST_DIR)/src/*.h $(GTEST_HEADERS)

# For simplicity and to avoid depending on Google Test's
# implementation details, the dependencies specified below are
# conservative and not optimized.  This is fine as Google Test
# compiles fast and for ordinary users its source rarely changes.
gtest-all.o : $(GTEST_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \
            $(GTEST_DIR)/src/gtest-all.cc

gtest_main.o : $(GTEST_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \
            $(GTEST_DIR)/src/gtest_main.cc

gtest.a : gtest-all.o
	$(AR) $(ARFLAGS) $@ $^

gtest_main.a : gtest-all.o gtest_main.o
	$(AR) $(ARFLAGS) $@ $^

# A test should link with either gtest.a or gtest_main.a,
# depending on whether it defines its own main() function.

# Test for the Pattern class, using gtest_main.a
pattern.o : $(USER_DIR)/pattern.cpp $(USER_DIR)/pattern.h $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/pattern.cpp

pattern_test.o : $(TEST_DIR)/pattern_test.cpp \
                     $(USER_DIR)/pattern.h $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(TEST_DIR)/pattern_test.cpp

pattern_test : delay.o pan.o velocity.o pitch.o note.o pattern.o pattern_test.o gtest_main.a
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@

# Test for the Note class, using gtest_main.a
note.o : $(USER_DIR)/note.cpp $(USER_DIR)/note.h $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/note.cpp

note_test.o : $(TEST_DIR)/note_test.cpp \
                     $(USER_DIR)/note.h $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(TEST_DIR)/note_test.cpp

note_test : delay.o pan.o velocity.o pitch.o note.o note_test.o gtest_main.a
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@

# Test for the Pitch class, using gtest_main.a
pitch.o : $(USER_DIR)/pitch.cpp $(USER_DIR)/pitch.h $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/pitch.cpp

pitch_test.o : $(TEST_DIR)/pitch_test.cpp \
                     $(USER_DIR)/pitch.h $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(TEST_DIR)/pitch_test.cpp

pitch_test : pitch.o pitch_test.o gtest_main.a
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@

# Test for the Velocity class, using gtest_main.a
velocity.o : $(USER_DIR)/velocity.cpp $(USER_DIR)/velocity.h $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/velocity.cpp

velocity_test.o : $(TEST_DIR)/velocity_test.cpp \
                     $(USER_DIR)/velocity.h $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(TEST_DIR)/velocity_test.cpp

velocity_test : velocity.o velocity_test.o gtest_main.a
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@

# Test for the Pan class, using gtest_main.a
pan.o : $(USER_DIR)/pan.cpp $(USER_DIR)/pan.h $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/pan.cpp

pan_test.o : $(TEST_DIR)/pan_test.cpp \
                     $(USER_DIR)/pan.h $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(TEST_DIR)/pan_test.cpp

pan_test : pan.o pan_test.o gtest_main.a
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@

# Test for the Delay class, using gtest_main.a
delay.o : $(USER_DIR)/delay.cpp $(USER_DIR)/delay.h $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/delay.cpp

delay_test.o : $(TEST_DIR)/delay_test.cpp \
                     $(USER_DIR)/delay.h $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(TEST_DIR)/delay_test.cpp

delay_test : delay.o delay_test.o gtest_main.a
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@

# Run all tests, using gtest.a
all_tests.o : $(TEST_DIR)/all_tests.cpp
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(TEST_DIR)/all_tests.cpp

all_tests : all_tests.o pattern.o pattern_test.o delay.o delay_test.o pan.o pan_test.o velocity.o velocity_test.o pitch.o note.o note_test.o note.o note_test.o gtest.a
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@
